    //Setup a read buffer
    char read_buf [64];
    memset(&read_buf, '\0', sizeof(read_buf));

    bool new_stuff = false;
    char buf [64];
    char humid_buf [5];
    char temp_buf [5];
    double humid = NULL;
    double temp = NULL;
    int count = 0;

    while(1){

        //Read from serial_port and store it in the buffer
        int n = read(serial_port, &read_buf, sizeof(read_buf));

        //Print to stdout if there is new data in the buffer
        if(n != 0){
            //Adding new stuff to the read buffer

            //printf("Status: %d \n", n);
            printf("%s", read_buf);
            new_stuff = true;
            memset(&read_buf, '\0', sizeof(read_buf));
        }
        else if(new_stuff){
            //No new stuff but stuff was added recently to the read buffer

            //Manually copy from read buffer into another buffer
            for(int i=0; i<(sizeof(buf)/sizeof(char)); i++){
                buf[count] = read_buf[i];
                count++;

                //Checking if there is a newline that was copied
                if(read_buf[i] == '\n'){

                    //Placeholder char arrays for temp & humid values
                    memcpy(humid_buf, &buf[13], sizeof(humid_buf));
                    memcpy(temp_buf, &buf[37], sizeof(temp_buf));

                    //Convert char arrays to doubles
                    humid = atof(humid_buf);
                    temp = atof(temp_buf);

                    //TESTING print buffer values
                    printf("Test H Char: %c \n", buf[13]);
                    printf("Test T Char: %c \n", buf[37]);

                    //TESTING print test values
                    printf("H: %d\n", humid);
                    printf("T: %d\n", temp);

                    //Clear second buffer & reset manual copy counter
                    memset(buf, 0, sizeof(buf));
                    count = 0;
                }
            }
            new_stuff = false;
        }

    }